"Level types"
enum Level{
    beginner
    intermediate
    advanced
}

type Course{
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String
    people: [Student]
    level: Level
}

interface Person{
    _id: ID!
    name: String!
    email: String!
}

type Monitor implements Person{
    _id: ID!
    name: String!
    email: String!
    age: Int!
    phone: String!
}

type Student implements Person{
    _id: ID!
    name: String!
    email: String!
    age: Int!
    avatar: String
    courses: [Course]
}

type Query {
    "Rerturns all courses"
    getCourses: [Course]
    "Returns a course by id"
    getCourse(id: ID!): Course
    "Rerturns all students"
    getPeople: [Person]
    "Returns a student by id"
    getPerson(id: ID!): Person
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput{
    title: String
    teacher: String
    description: String
    topic: String
}

input PersonInput{
    name: String
    email: String
    phone: String
    avatar: String
    age: Int
}

input PersonEditInput{
    name: String
    email: String
    phone: String
    avatar: String
    age: Int
}

type Mutation{
    "Creates a new course"
    createCourse(input: CourseInput!): Course
    "Edit course"
    editCourse(_id: ID!,input: CourseEditInput): Course
    "Delete course"
    deleteCourse(_id: ID!): ID
    "Creates a new person"
    createPerson(input: PersonInput!): Person
    "Edit person"
    editPerson(_id: ID!, input: PersonEditInput): Person
    "Delete student"
    deleteStudent(_id: ID!): ID
    "Add person to a course"
    addPeople(courseID: ID!, personID: ID!): Course
}
