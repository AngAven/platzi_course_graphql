type Course{
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String
}

type Student{
    _id: ID!
    name: String!
    age: Int!
    email: String!
    courses: [Course]
}

type Query {
    "Rerturns all courses"
    getCourses: [Course]
    "Returns a course by id"
    getCourse(id: ID!): Student
    "Rerturns all students"
    getStudents: [Student]
    "Returns a student by id"
    getStudent(id: ID!): Student
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
}

input CourseEditInput{
    title: String
    teacher: String
    description: String
    topic: String
}

input StudentInput{
    name: String!
    age: Int!
    email: String!
}

input StudentEditInput{
    name: String
    age: Int
    email: String
}

type Mutation{
    "Creates a new course"
    createCourse(input: CourseInput!): Course
    "Edit course"
    editCourse(_id: ID!,input: CourseEditInput): Course
    "Delete course"
    deleteCourse(_id: ID!): ID
    "Creates a new student"
    createStudent(input: StudentInput!): Student
    "Edit student"
    editStudent(_id: ID!, input: StudentEditInput): Student
    "Delete student"
    deleteStudent(_id: ID!): ID
}
